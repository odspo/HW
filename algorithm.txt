#### 算法1

- 只算奇数

- 一个合数的最小非1因子一定小于其平方根

- $$
  \frac{n}{2}(\sum_{i}^{n}\sqrt{i})
  $$

- ```c++
  #include <iostream>
  using namespace std;
  /*
  1、只判断奇数
  2、对于一个合数，它的最小非1因子一定小于它的平方根
  */
  int func(int n);
  int main()
  {
  	int m;
  	cin>>m;
  	for(int i=0;i<m;i++)
  	{
  		int n;
  		cin>>n;
  		cout<<func(n)<<endl;
  	}
  	return 0;
  }
  
  int func(int n)
  {	
  	int count;
  	if(n==0||n==1)count = 0;
  	else if(n==2) count = 1;
  	else{
  	count = 1;
  	for(int i=3;i<=n;i+=2){
  		bool isPrime = true;
  		for(int j=3;j*j<=i;j+=2){
  			if(i%j==0){
  				isPrime = false;
  				break;
  			}
  		}
  		if(isPrime){
  			count++;
  		}
  	}
  	}
  	return count;
  }
  ```

- 


#### 算法2

- bool数组：偶数false，奇数true

- 奇数的倍数false


```c++
#include<iostream>
using namespace std;

int func(int n);
int main()
{
	int m;
	cin>>m;
	for(int i=0; i<m; i++)
	{
		int n;
		cin>>n;
		cout<<func(n)<<endl;
	}
	return 0;
}

int func(int n)
{
	int count = 0;
	if(n<2) count = 0;
	else if(n==2) count = 1;
	else if(n==3) count = 2;
	else
	{
	bool* primes=new bool[n+1];
	for(int i=1;i<=n;i++)
	{
		if(i%2==0)primes[i]=false;
		if(i%2==1){
			primes[i]=true;
		}
	}
	for(int i=3;i*i<=n;i+=2)
	{
		if(primes[i])
		for(int j=i+i;j<=n;j+=i)primes[j]=false;
	}
	for(int i=1;i<=n;i++)
	{
		if(primes[i])count++;
	}
	}
	return count;
}
```

